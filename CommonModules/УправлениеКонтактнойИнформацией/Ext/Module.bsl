// Выполняет отложенную инициализацию реквизитов и элементов контактной информации.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//
&Вместо("ПриСозданииНаСервере")
// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации. Если это ссылка, то контактная информация
//                                          будет получена из объекта по ссылке, иначе из таблицы КонтактнаяИнформация объекта.
//    ИмяЭлементаДляРазмещения - Строка - группа, куда будут размещены элементы контактной информации.
//    ПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Может принимать значения.
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//
Процедура CCRM_ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаКИ = "",
	Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь, ИсключаемыеВидыВыводятся = Истина) Экспорт
	
	Если ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформацияStorch" Тогда
		Storch = "И ВидыКонтактнойИнформации.Наименование ПОДОБНО ""%Storch""";
	Иначе
		Storch = "И НЕ ВидыКонтактнойИнформации.Наименование ПОДОБНО ""%Storch""";
	КонецЕсли;
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов);
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ГруппаВидовКИ = ГруппаВидовКонтактнойИнформацииОбъекта(СсылкаНаОбъект);
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		// Добавим новые реквизиты
		Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		КонецЕсли;
		ДобавленныеРеквизиты = Новый Массив;
		Для Каждого СтрокаРеквизита Из МассивДобавляемыхРеквизитов Цикл
			Если ПустаяСтрока(СтрокаРеквизита.Путь) Тогда
				ДобавленныеРеквизиты.Добавить(СтрокаРеквизита.Имя);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
			ОтложеннаяИнициализация, ИсключаемыеВиды);
		ПараметрыКонтактнойИнформации.ДобавленныеРеквизиты = ДобавленныеРеквизиты;
		ПараметрыКонтактнойИнформации.Владелец = СсылкаНаОбъект;
		
		Если Не ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
			Форма.Элементы[ИмяЭлементаДляРазмещения].Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ЕстьКолонкаДействуетС = (РеквизитыОбъекта.Найти("ДействуетС") <> Неопределено);
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти = (РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, 
		|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
		|	КонтактнаяИнформация.ЗначенияПолей,
		|	"""" КАК ДействуетС,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ " +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС"+Storch;
		
		ПоляКонтактнойИнформации = "";
		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
				"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;
		
		Если ЕстьКолонкаДействуетС Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """"" КАК ДействуетС", "КонтактнаяИнформация.ДействуетС КАК ДействуетС");
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		
		Если ЕстьКолонкаДействуетС Тогда
			ТипБулево = Новый ОписаниеТипов("Булево");
			КонтактнаяИнформация.Колонки.Добавить("ХранитьИсториюИзменений", ТипБулево);
			КонтактнаяИнформация.Колонки.Добавить("ЭтоИсторическаяКонтактнаяИнформация", ТипБулево);
			КонтактнаяИнформация.Сортировать("Вид, ДействуетС");
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
				СтрокаКонтактнойИнформации.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.Вид.ХранитьИсториюИзменений;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьКолонкаДействуетС Тогда
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапросаИсторическаяИнформация = " КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация КАК ЭтоИсторическаяКонтактнаяИнформация,
			|	КонтактнаяИнформация.ДействуетС                  КАК ДействуетС,";
	Иначе
		ТекстЗапросаИсторическаяИнформация = "ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,0 КАК ДействуетС, ";
	КонецЕсли;
	
	ТекстЗапроса = " ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки, " + ТекстЗапросаИсторическаяИнформация + " 
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ВидПоляДругое                КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                        КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО 
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Используется
	|	И ЕстьNULL(ВидыКонтактнойИнформации.Родитель.Используется, Истина)
	|	И (
	|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)"+Storch+"
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
			"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид = Неопределено;
	ПорядковыйНомер = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4",
						"КонтактнаяИнформацияПоле",
						ИмяТабличнойЧасти,
						СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
						ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ));
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
				ПорядковыйНомер = 1;
			Иначе
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			
			Если Индекс = Неопределено Тогда
				
				ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
				
				ОбъектКонтактнойИнформации.ИмяРеквизита = ИмяРеквизита;
				Если Не ОтложеннаяИнициализация Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию.
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(УправлениеКонтактнойИнформациейСлужебный.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Некорректный формат контактной информации.'"), ,
				ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
			ОтложеннаяИнициализация, ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Владелец = СсылкаНаОбъект;
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	
	ЗаголовокСлева = ЗаголовокСлева(Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ПоложениеЗаголовка);
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	СтатусКонтекстногоМеню = 0;
	ПредыдущийЭлемент = Неопределено;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(СтрокаКИ.Вид);
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита,
						2, Ложь);
					
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, Ложь, Истина,, ИмяЭлементаДляРазмещения);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтрокиТабличнойЧасти);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, СтатическийЭлемент, ИмяЭлементаДляРазмещения);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ИсключаемыеВидыВыводятся Или ИсключаемыеВиды.Найти(СтрокаКИ.Вид) = Неопределено Тогда
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, ИмяЭлементаДляРазмещения);
		КонецЕсли;
		
		Если СтатическийЭлемент Тогда
			СозданныеЭлементы.Удалить(ИндексЭлемента);
		Иначе
			
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
				ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ));
			
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОтложеннаяИнициализация 
		И Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		Описание = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения, Форма, Описание, ИмяЭлементаДляРазмещения);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = Описание;
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Доступность = НЕ Форма.Элементы[ИмяЭлементаДляРазмещения].ТолькоПросмотр;
		Кнопка.Заголовок = НСтр("ru = 'Добавить'");
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(ИмяКоманды, 2, Ложь);
	Иначе
		ГруппаДляРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
		// Если отложенная инициализация и на странице нет элементов, то платформа скрывает страницу,
		// поэтому надо создавать временный элемент, который при переходе на страницу удаляется.
		Если ОтложеннаяИнициализация
			И ГруппаДляРазмещения.Вид = ВидГруппыФормы.Страница
			И Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка") = Неопределено Тогда
				ГруппаСтраниц = ГруппаДляРазмещения.Родитель;
				ЗаголовокСтраницы = ?(ЗначениеЗаполнено(ГруппаДляРазмещения.Заголовок), ГруппаДляРазмещения.Заголовок, ГруппаДляРазмещения.Имя);
				ЗаголовокГруппыСтраниц = ?(ЗначениеЗаполнено(ГруппаСтраниц.Заголовок), ГруппаСтраниц.Заголовок, ГруппаСтраниц.Имя);
				
				ПредупреждениеОРазмещении = НСтр("ru = 'Для отображения контактной информации необходимо разместить группу ""%1"" не первым элементом (после любой другой группы) в группе ""%2"" (меню Еще - Изменить форму).'");
				ПредупреждениеОРазмещении = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредупреждениеОРазмещении,
					ЗаголовокСтраницы, ЗаголовокГруппыСтраниц);
				ТекстПодсказки = НСтр("ru = 'Также можно установить стандартные настройки формы:
					|   • в меню Еще выбрать пункт Изменить форму...;
					|   • в открывшейся форме ""Настройка формы"" в меню Еще выбрать пункт ""Установить стандартные настройки"".'");
					
				Декорация = Форма.Элементы.Добавить("КонтактнаяИнформацияЗаглушка", Тип("ДекорацияФормы"), ГруппаДляРазмещения);
				Декорация.Заголовок = ПредупреждениеОРазмещении;
				Декорация.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
				Декорация.Подсказка = ТекстПодсказки;
				Декорация.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
				Декорация.АвтоМаксимальнаяВысота = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


