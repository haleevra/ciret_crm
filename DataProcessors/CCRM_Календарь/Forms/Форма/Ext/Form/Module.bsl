
#Область ПеременныеФормы

&НаКлиенте
Перем ТекущийЭлементЦвета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//Элементы.ФормаВсеКалендари.Видимость			= Пользователи.ЭтоПолноправныйПользователь();
	//Элементы.ФормаСписокЗаписейКалендаря.Видимость	= Элементы.ФормаВсеКалендари.Видимость;
	
	ВосстановитьНастройки();
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//Если ИсточникВыбора.ИмяФормы = "Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря" Тогда
	//	
	//	Если ВыбранноеЗначение <> Неопределено Тогда
	//		ЗаполнитьЗначенияСвойств(НастройкиОтображения, ВыбранноеЗначение);
	//		СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	//	КонецЕсли;
	//	
	//Иначе
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборЦвета" Тогда
		
		Если ТекущийЭлементЦвета <> Неопределено Тогда
			
			ТекущийЭлементЦвета.Картинка = КартинкаЦветаПоНомеруКартинки(ВыбранноеЗначение);
			Индекс = Число(Сред(ТекущийЭлементЦвета.Имя, СтрДлина("ЦветКалендарь_")+1));
			ТекКалендарь = ДоступныеКалендари[Индекс];
			ТекКалендарь.ВариантЦвета = ВыбранноеЗначение;
			
			Если ТекКалендарь.Выбран Тогда
				СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИсточникЗаписейКалендаряСотрудника"
		Или ИмяСобытия = "Запись_ЗаписиКалендаряПодготовкиОтчетности" Тогда
		
		ОбновитьДанныеПланировщикаСервер();
		
	ИначеЕсли ИмяСобытия = "Запись_КалендарьСотрудника" Тогда
		
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		СеансовыеДанные = Новый Структура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДобавитьКалендарьНажатие(Элемент)
	
	ОткрытьФорму("Справочник.КалендариСотрудников.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИзКалендаря", Истина);
	ЗначенияЗаполнения.Вставить("ДатаНачала", Начало);
	ЗначенияЗаполнения.Вставить("ДатаОкончания", Конец);
	Если ВыбранныеКалендари.Количество() = 1 Тогда
		ЗначенияЗаполнения.Вставить("Ответственный", ВыбранныеКалендари[0].Календарь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Встреча.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаОтображения = ТекущаяДатаСеанса;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЦветКалендарьНажатие(Элемент)
	
	ТекущийЭлементЦвета = Элемент;
	ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря", Новый Структура("НастройкиОтображения", НастройкиОтображения), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
		И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("ДокументСсылка.Встреча") Тогда
		
		ОткрытьФорму("Документ.Встреча.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.Источник));  
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.ЗаписьКалендаря)
		И ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) = Тип("ДокументСсылка.Встреча") Тогда
		
		ОткрытьФорму("Документ.Встреча.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.ЗаписьКалендаря));  	
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
		И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ОткрытьФорму("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.Источник));  
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.ЗаписьКалендаря)
		И ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ОткрытьФорму("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.ЗаписьКалендаря));  	
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
		И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.Источник));  
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.ЗаписьКалендаря)
		И ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", Новый Структура("Ключ", ЗначениеЭлемента.ЗаписьКалендаря));  	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение
	);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДатаСеанса();
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения
	);
	
	СохранитьНастройкиДоступныхКалендарей();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступныхКалендарей()
	
	НастройкиДоступныхКалендарей = РеквизитФормыВЗначение("ДоступныеКалендари");
	НастройкиДоступныхКалендарей.Колонки.Удалить("Наименование");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		НастройкиДоступныхКалендарей
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеКалендари.Добавить(СтрокаКалендаря.Календарь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Встреча.Ссылка КАК Источник
		|ПОМЕСТИТЬ втИсточники
		|ИЗ
		|	Документ.Встреча КАК Встреча
		|ГДЕ
		|	Встреча.ПометкаУдаления = ЛОЖЬ
		|	И Встреча.ДатаНачала < &ДатаОкончания
		|	И Встреча.ДатаОкончания > &ДатаНачала
		|	И Встреча.Ответственный В(&ВыбранныеКалендари)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапланированноеВзаимодействие.Ссылка
		|ИЗ
		|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО ЗапланированноеВзаимодействие.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|ГДЕ
		|	ЗапланированноеВзаимодействие.ПометкаУдаления = ЛОЖЬ
		|	И ЗапланированноеВзаимодействие.Ответственный В(&ВыбранныеКалендари)
		|	И ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.РассмотретьПосле ЕСТЬ NULL
		|				ТОГДА ЗапланированноеВзаимодействие.Дата >= &ДатаНачала
		|						И ЗапланированноеВзаимодействие.Дата <= &ДатаОкончания
		|			ИНАЧЕ ПредметыПапкиВзаимодействий.РассмотретьПосле >= &ДатаНачала
		|					И ПредметыПапкиВзаимодействий.РассмотретьПосле <= &ДатаОкончания
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.ПометкаУдаления = ЛОЖЬ
		|	И ТелефонныйЗвонок.Ответственный В(&ВыбранныеКалендари)
		|	И ТелефонныйЗвонок.Дата >= &ДатаНачала
		|	И ТелефонныйЗвонок.Дата <= &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Встреча.Ссылка
		|ПОМЕСТИТЬ втРазрешенныеИсточники
		|ИЗ
		|	Документ.Встреча КАК Встреча
		|ГДЕ
		|	Встреча.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапланированноеВзаимодействие.Ссылка
		|ИЗ
		|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
		|ГДЕ
		|	ЗапланированноеВзаимодействие.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Встреча.Ссылка КАК ЗаписьКалендаря,
		|	Встреча.Тема КАК Наименование,
		|	Встреча.ДатаНачала КАК Начало,
		|	Встреча.ДатаОкончания КАК Конец,
		|	Встреча.Комментарий КАК Описание,
		|	Встреча.Ссылка КАК Источник,
		|	0 КАК НомерСтрокиИсточника,
		|	Встреча.Ответственный КАК Календарь,
		|	ЛОЖЬ КАК РедактированиеЗапрещено
		|ИЗ
		|	Документ.Встреча КАК Встреча
		|ГДЕ
		|	Встреча.Ссылка В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И Встреча.ПометкаУдаления = ЛОЖЬ
		|	И Встреча.ДатаНачала < &ДатаОкончания
		|	И Встреча.ДатаОкончания > &ДатаНачала
		|	И Встреча.Ответственный В(&ВыбранныеКалендари)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапланированноеВзаимодействие.Ссылка,
		|	ЗапланированноеВзаимодействие.Тема,
		|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ЗапланированноеВзаимодействие.Дата),
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ЗапланированноеВзаимодействие.Дата), МИНУТА, 15),
		|	ЗапланированноеВзаимодействие.Комментарий,
		|	ЗапланированноеВзаимодействие.Ссылка,
		|	0,
		|	ЗапланированноеВзаимодействие.Ответственный,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО ЗапланированноеВзаимодействие.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|ГДЕ
		|	ЗапланированноеВзаимодействие.Ссылка В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗапланированноеВзаимодействие.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.РассмотретьПосле ЕСТЬ NULL
		|				ТОГДА ЗапланированноеВзаимодействие.Дата >= &ДатаНачала
		|						И ЗапланированноеВзаимодействие.Дата <= &ДатаОкончания
		|			ИНАЧЕ ПредметыПапкиВзаимодействий.РассмотретьПосле >= &ДатаНачала
		|					И ПредметыПапкиВзаимодействий.РассмотретьПосле <= &ДатаОкончания
		|		КОНЕЦ
		|	И ЗапланированноеВзаимодействие.Ответственный В(&ВыбранныеКалендари)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка,
		|	ТелефонныйЗвонок.Тема,
		|	ТелефонныйЗвонок.Дата,
		|	ДОБАВИТЬКДАТЕ(ТелефонныйЗвонок.Дата, МИНУТА, 15),
		|	ТелефонныйЗвонок.Комментарий,
		|	ТелефонныйЗвонок.Ссылка,
		|	0,
		|	ТелефонныйЗвонок.Ответственный,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.Ссылка В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ТелефонныйЗвонок.ПометкаУдаления = ЛОЖЬ
		|	И ТелефонныйЗвонок.Дата >= &ДатаНачала
		|	И ТелефонныйЗвонок.Ответственный В(&ВыбранныеКалендари)
		|	И ТелефонныйЗвонок.Дата <= &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("Календарь");
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Начало, Выборка.Конец);
		ЭлементПланировщика.Значение = Новый Структура;
		ЭлементПланировщика.Значение.Вставить("Календарь", Выборка.Календарь);
		ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", Выборка.ЗаписьКалендаря);
		ЭлементПланировщика.Значение.Вставить("Источник", Выборка.Источник);
		ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", Выборка.РедактированиеЗапрещено);
		ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", Выборка.НомерСтрокиИсточника);
		ЭлементПланировщика.Текст		= Выборка.Наименование;
		ЭлементПланировщика.Подсказка	= Выборка.Описание;
		
		//Если ЗначениеЗаполнено(Выборка.Источник) Тогда
		//	МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Источник);
		//	ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(Выборка.Источник);
		//	ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(Выборка.Источник);
		//КонецЕсли;
		
		Отбор.Календарь = Выборка.Календарь;
		НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементПланировщика.ЦветФона = ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы)
	Отказ = Истина;
	
	Попытка
		Для Каждого Элемент Из ОбрабатываемыеЭлементы Цикл
			Объект = Элемент.ЗаписьКалендаря.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	Исключение
		Отказ = Ложь;
	КонецПопытки;
	
	Возврат Отказ;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент()
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДоступныхКалендарей()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ДоступныеКалендари.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		
		Индекс = ДоступныеКалендари.Индекс(СтрокаКалендаря);
		
		ГруппаКалендаря = Элементы.Добавить("ГруппаКалендарь_" + Индекс, Тип("ГруппаФормы"), Элементы.ДоступныеКалендари);
		ГруппаКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКалендаря.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаКалендаря.ОтображатьЗаголовок = Ложь;
		
		ФлагВыбран = Элементы.Добавить("ВыбранКалендарь_" + Индекс, Тип("ПолеФормы"), ГруппаКалендаря);
		ФлагВыбран.Вид = ВидПоляФормы.ПолеФлажка;
		ФлагВыбран.ПутьКДанным = "ДоступныеКалендари[" + Индекс + "].Выбран";
		ФлагВыбран.Заголовок = СтрокаКалендаря.Наименование;
		ФлагВыбран.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагВыбран.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранКалендарьПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить("ОтступКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		
		КартинкаЦвета = Элементы.Добавить("ЦветКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		КартинкаЦвета.Вид = ВидДекорацииФормы.Картинка;
		КартинкаЦвета.Картинка = КартинкаЦветаПоНомеруКартинки(СтрокаКалендаря.ВариантЦвета);
		КартинкаЦвета.Гиперссылка = Истина;
		КартинкаЦвета.Ширина = 2;
		КартинкаЦвета.Высота = 1;
		КартинкаЦвета.УстановитьДействие("Нажатие", "Подключаемый_ЦветКалендарьНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКалендаряСервер()
	
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДоступныеКалендари()
	
	ДоступныеКалендари.Очистить();
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений
	);
	
	ЗанятыеЦвета = ?(НастройкиДоступныхКалендарей.Количество() = 0, Новый Массив, НастройкиДоступныхКалендарей.ВыгрузитьКолонку("ВариантЦвета"));
	ЕстьНеНазначенныеЦвета = Ложь;
	
	ТаблицаКалендарей = ДоступныеПользователюКалендари();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКалендарей Цикл
		
		НоваяСтрока = ДоступныеКалендари.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Календарь,Наименование");
		
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(СтрокаТаблицы.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "ВариантЦвета,Выбран");
		КонецЕсли;
		
		Если НоваяСтрока.ВариантЦвета = 0 Тогда
			ПроверяемыйЦвет = 14;
			Пока Истина Цикл
				Если ЗанятыеЦвета.Найти(ПроверяемыйЦвет) = Неопределено Тогда
					НоваяСтрока.ВариантЦвета = ПроверяемыйЦвет;
					ЕстьНеНазначенныеЦвета = Истина;
					Прервать;
				КонецЕсли;
				ПроверяемыйЦвет = ?(ПроверяемыйЦвет = 80, 1, ПроверяемыйЦвет+1);
			КонецЦикла;
		КонецЕсли;
		
		ЗанятыеЦвета.Добавить(НоваяСтрока.ВариантЦвета);
		Если ЗанятыеЦвета.Количество() = 80 Тогда
			ЗанятыеЦвета.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Отбор.Удалить("Выбран");
		Отбор.Вставить("Календарь");
		Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
			Отбор.Календарь = СтрокаКалендаря.Календарь;
			СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНеНазначенныеЦвета Тогда
		СохранитьНастройкиДоступныхКалендарей();
	КонецЕсли;
	
	ОбновитьЭлементыДоступныхКалендарей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.ПредставлениеПериода = Формат(Форма.ДатаОтображения, "ДФ='дддд, д МММ'");
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		Форма.ПредставлениеПериода = СтрШаблон(
			"%1 - %2",
			Формат(ПериодДанных.ДатаНачала, "ДФ='д МММ'"),
			Формат(ПериодДанных.ДатаОкончания, "ДФ='д МММ гггг'")
		);
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция возвращает цвет, отличающийся от исходного светлотой
//
// Параметры:
//  Цвет			 - Цвет	 - исходный цвет
//  ДельтаСветлоты	 - Число - процент изменения светлоты цвета. Значение 100 белый цвет, -100 черный.
// 
// Возвращаемое значение:
//  Цвет - цвет с измененной светлотой
//
Функция ИзменитьСветлотуЦвета(знач Цвет, знач ДельтаСветлоты) Экспорт
	
	Если Цвет.Вид <> ВидЦвета.Абсолютный Тогда
		Возврат Цвет;
	КонецЕсли;
	
	Если ДельтаСветлоты >= 0 Тогда
		КрайнееЗначение = 255;
	Иначе
		КрайнееЗначение = 0;
	КонецЕсли;
	
	R = Цвет.Красный + ДельтаСветлоты * Макс(КрайнееЗначение - Цвет.Красный, Цвет.Красный - КрайнееЗначение) / 100;
	G = Цвет.Зеленый + ДельтаСветлоты * Макс(КрайнееЗначение-Цвет.Зеленый, Цвет.Зеленый - КрайнееЗначение) / 100;
	B = Цвет.Синий + ДельтаСветлоты * Макс(КрайнееЗначение-Цвет.Синий, Цвет.Синий - КрайнееЗначение) / 100;
	
	Возврат Новый Цвет(R, G, B);
	
КонецФункции

// Функция возвращает набор пастельных цветов в порядке их взаимной контрастности
// Возвращаемое значение:
//  Массив - массив цветов для использования в сериях на диаграммах
Функция ЦветаСерийДиаграмм() Экспорт
	
	МассивЦветов = Новый Массив;
	
	МассивЦветов.Добавить(Новый Цвет(245, 152, 150));
	МассивЦветов.Добавить(Новый Цвет(142, 201, 249));
	МассивЦветов.Добавить(Новый Цвет(255, 202, 125));
	МассивЦветов.Добавить(Новый Цвет(178, 154, 218));
	МассивЦветов.Добавить(Новый Цвет(163, 214, 166));
	МассивЦветов.Добавить(Новый Цвет(244, 140, 175));
	МассивЦветов.Добавить(Новый Цвет(125, 221, 233));
	МассивЦветов.Добавить(Новый Цвет(255, 242, 128));
	МассивЦветов.Добавить(Новый Цвет(205, 145, 215));
	МассивЦветов.Добавить(Новый Цвет(125, 202, 194));
	
	Возврат МассивЦветов;
	
КонецФункции

// Функция - Цвет по номеру картинки
//
// Параметры:
//  НомерКартинки	 - Число	 - номер картинки цвета из библиотеки картинок
// 
// Возвращаемое значение:
//  Цвет - цвет картинки
//
Функция ЦветПоНомеруКартинки(НомерКартинки) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(1,  Новый Цвет(172,114,94));
	Соответствие.Вставить(2,  Новый Цвет(208,107,100));
	Соответствие.Вставить(3,  Новый Цвет(248,58,34));
	Соответствие.Вставить(4,  Новый Цвет(250,87,60));
	Соответствие.Вставить(5,  Новый Цвет(255,117,55));
	Соответствие.Вставить(6,  Новый Цвет(255,173,70));
	Соответствие.Вставить(7,  Новый Цвет(66,214,146));
	Соответствие.Вставить(8,  Новый Цвет(22,167,101));
	Соответствие.Вставить(9,  Новый Цвет(123,209,72));
	Соответствие.Вставить(10, Новый Цвет(179,220,108));
	Соответствие.Вставить(11, Новый Цвет(251,233,131));
	Соответствие.Вставить(12, Новый Цвет(250,209,101));
	Соответствие.Вставить(13, Новый Цвет(146,225,192));
	Соответствие.Вставить(14, Новый Цвет(159,225,231));
	Соответствие.Вставить(15, Новый Цвет(159,198,231));
	Соответствие.Вставить(16, Новый Цвет(73,134,231));
	Соответствие.Вставить(17, Новый Цвет(154,156,255));
	Соответствие.Вставить(18, Новый Цвет(185,154,255));
	Соответствие.Вставить(19, Новый Цвет(194,194,194));
	Соответствие.Вставить(20, Новый Цвет(202,189,191));
	Соответствие.Вставить(21, Новый Цвет(204,166,172));
	Соответствие.Вставить(22, Новый Цвет(246,145,178));
	Соответствие.Вставить(23, Новый Цвет(205,116,230));
	Соответствие.Вставить(24, Новый Цвет(164,122,226));
	
	Возврат Соответствие[НомерКартинки];
	
КонецФункции

// Функция - Картинка цвета по номеру картинки
//
// Параметры:
//  НомерКартинки	 - Число	 - номер картинки цвета из библиотеки картинок
// 
// Возвращаемое значение:
//  Картинка - картинка цвета из библиотеки картинок
//
Функция КартинкаЦветаПоНомеруКартинки(НомерКартинки) Экспорт
	
	НомерСтрокой = Формат(НомерКартинки, "ЧЦ=2; ЧВН=");
	
	Возврат БиблиотекаКартинок["Цвет" + НомерСтрокой];
	
КонецФункции

#КонецОбласти

Функция ДоступныеПользователюКалендари() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Календарь,
	|	Пользователи.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Пользователи.Ссылка = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяВладельцем
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Предопределенный
	|	И НЕ Пользователи.ПометкаУдаления
	//+?(Пользователи.ЭтоПолноправныйПользователь(),"", "	И Пользователи.Ссылка = &Пользователь")+
	|УПОРЯДОЧИТЬ ПО
	|	ЯвляетсяВладельцем УБЫВ,
	|	Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

